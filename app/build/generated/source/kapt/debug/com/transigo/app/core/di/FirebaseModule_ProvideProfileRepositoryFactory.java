// Generated by Dagger (https://dagger.dev).
package com.transigo.app.core.di;

import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.firestore.FirebaseFirestore;
import com.transigo.app.data.repository.ProfileRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class FirebaseModule_ProvideProfileRepositoryFactory implements Factory<ProfileRepository> {
  private final Provider<FirebaseFirestore> firestoreProvider;

  private final Provider<FirebaseAuth> firebaseAuthProvider;

  public FirebaseModule_ProvideProfileRepositoryFactory(
      Provider<FirebaseFirestore> firestoreProvider, Provider<FirebaseAuth> firebaseAuthProvider) {
    this.firestoreProvider = firestoreProvider;
    this.firebaseAuthProvider = firebaseAuthProvider;
  }

  @Override
  public ProfileRepository get() {
    return provideProfileRepository(firestoreProvider.get(), firebaseAuthProvider.get());
  }

  public static FirebaseModule_ProvideProfileRepositoryFactory create(
      Provider<FirebaseFirestore> firestoreProvider, Provider<FirebaseAuth> firebaseAuthProvider) {
    return new FirebaseModule_ProvideProfileRepositoryFactory(firestoreProvider, firebaseAuthProvider);
  }

  public static ProfileRepository provideProfileRepository(FirebaseFirestore firestore,
      FirebaseAuth firebaseAuth) {
    return Preconditions.checkNotNullFromProvides(FirebaseModule.INSTANCE.provideProfileRepository(firestore, firebaseAuth));
  }
}
