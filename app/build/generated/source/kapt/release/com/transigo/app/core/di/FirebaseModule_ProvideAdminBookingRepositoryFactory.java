// Generated by Dagger (https://dagger.dev).
package com.transigo.app.core.di;

import com.google.firebase.firestore.FirebaseFirestore;
import com.transigo.app.core.service.NotificationService;
import com.transigo.app.data.repository.AdminBookingRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class FirebaseModule_ProvideAdminBookingRepositoryFactory implements Factory<AdminBookingRepository> {
  private final Provider<FirebaseFirestore> firestoreProvider;

  private final Provider<NotificationService> notificationServiceProvider;

  public FirebaseModule_ProvideAdminBookingRepositoryFactory(
      Provider<FirebaseFirestore> firestoreProvider,
      Provider<NotificationService> notificationServiceProvider) {
    this.firestoreProvider = firestoreProvider;
    this.notificationServiceProvider = notificationServiceProvider;
  }

  @Override
  public AdminBookingRepository get() {
    return provideAdminBookingRepository(firestoreProvider.get(), notificationServiceProvider.get());
  }

  public static FirebaseModule_ProvideAdminBookingRepositoryFactory create(
      Provider<FirebaseFirestore> firestoreProvider,
      Provider<NotificationService> notificationServiceProvider) {
    return new FirebaseModule_ProvideAdminBookingRepositoryFactory(firestoreProvider, notificationServiceProvider);
  }

  public static AdminBookingRepository provideAdminBookingRepository(FirebaseFirestore firestore,
      NotificationService notificationService) {
    return Preconditions.checkNotNullFromProvides(FirebaseModule.INSTANCE.provideAdminBookingRepository(firestore, notificationService));
  }
}
