<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/transigo/app/auth/AuthViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/transigo/app/auth/AuthViewModel.kt" />
              <option name="originalContent" value="package com.transigo.app.auth&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.transigo.app.data.model.User&#10;import com.transigo.app.data.repository.AuthRepository&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * ViewModel for managing authentication state and operations.&#10; * Exposes loading state, error messages, and current user information.&#10; */&#10;class AuthViewModel(&#10;    private val authRepository: AuthRepository = AuthRepository()&#10;) : ViewModel() {&#10;&#10;    // Private mutable state flows&#10;    private val _isLoading = MutableStateFlow(false)&#10;    private val _error = MutableStateFlow&lt;String?&gt;(null)&#10;    private val _user = MutableStateFlow&lt;User?&gt;(null)&#10;&#10;    // Public read-only state flows&#10;    val isLoading: StateFlow&lt;Boolean&gt; = _isLoading.asStateFlow()&#10;    val error: StateFlow&lt;String?&gt; = _error.asStateFlow()&#10;    val user: StateFlow&lt;User?&gt; = _user.asStateFlow()&#10;&#10;    init {&#10;        // Start listening to authentication state changes&#10;        observeAuthState()&#10;    }&#10;&#10;    /**&#10;     * Observes the current user authentication state and updates the user StateFlow.&#10;     * This will automatically update the UI when authentication state changes.&#10;     */&#10;    private fun observeAuthState() {&#10;        viewModelScope.launch {&#10;            authRepository.currentUserFlow().collect { user -&gt;&#10;                _user.value = user&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Registers a new user with email, password, and full name.&#10;     * Updates loading state and handles errors appropriately.&#10;     * &#10;     * @param email User's email address&#10;     * @param password User's password&#10;     * @param fullName User's full name&#10;     * @param onSuccess Callback invoked when registration succeeds&#10;     */&#10;    fun register(&#10;        email: String,&#10;        password: String,&#10;        fullName: String,&#10;        onSuccess: () -&gt; Unit = {}&#10;    ) {&#10;        // Validate input&#10;        if (!isValidEmail(email)) {&#10;            _error.value = &quot;Please enter a valid email address&quot;&#10;            return&#10;        }&#10;        &#10;        if (!isValidPassword(password)) {&#10;            _error.value = &quot;Password must be at least 6 characters long&quot;&#10;            return&#10;        }&#10;&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            _error.value = null&#10;            &#10;            authRepository.register(email.trim(), password, fullName.trim())&#10;                .onSuccess { user -&gt;&#10;                    _user.value = user&#10;                    _isLoading.value = false&#10;                    onSuccess()&#10;                }&#10;                .onFailure { exception -&gt;&#10;                    _error.value = getErrorMessage(exception)&#10;                    _isLoading.value = false&#10;                }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Authenticates user with email and password.&#10;     * Updates loading state and handles errors appropriately.&#10;     * &#10;     * @param email User's email address&#10;     * @param password User's password&#10;     * @param onSuccess Callback invoked when login succeeds&#10;     */&#10;    fun login(&#10;        email: String,&#10;        password: String,&#10;        onSuccess: () -&gt; Unit = {}&#10;    ) {&#10;        // Validate input&#10;        if (!isValidEmail(email)) {&#10;            _error.value = &quot;Please enter a valid email address&quot;&#10;            return&#10;        }&#10;        &#10;        if (password.isEmpty()) {&#10;            _error.value = &quot;Please enter your password&quot;&#10;            return&#10;        }&#10;&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            _error.value = null&#10;            &#10;            authRepository.login(email.trim(), password)&#10;                .onSuccess { user -&gt;&#10;                    _user.value = user&#10;                    _isLoading.value = false&#10;                    onSuccess()&#10;                }&#10;                .onFailure { exception -&gt;&#10;                    _error.value = getErrorMessage(exception)&#10;                    _isLoading.value = false&#10;                }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Signs out the current user.&#10;     * Clears user state and handles any errors.&#10;     */&#10;    fun logout() {&#10;        authRepository.logout()&#10;            .onSuccess {&#10;                _user.value = null&#10;                _error.value = null&#10;            }&#10;            .onFailure { exception -&gt;&#10;                _error.value = getErrorMessage(exception)&#10;            }&#10;    }&#10;&#10;    /**&#10;     * Sends a password reset email to the specified email address.&#10;     * &#10;     * @param email Email address to send reset link to&#10;     * @param onSuccess Callback invoked when reset email is sent successfully&#10;     */&#10;    fun resetPassword(&#10;        email: String,&#10;        onSuccess: () -&gt; Unit = {}&#10;    ) {&#10;        if (!isValidEmail(email)) {&#10;            _error.value = &quot;Please enter a valid email address&quot;&#10;            return&#10;        }&#10;&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            _error.value = null&#10;            &#10;            authRepository.resetPassword(email.trim())&#10;                .onSuccess {&#10;                    _isLoading.value = false&#10;                    onSuccess()&#10;                }&#10;                .onFailure { exception -&gt;&#10;                    _error.value = getErrorMessage(exception)&#10;                    _isLoading.value = false&#10;                }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Clears any current error message.&#10;     * Useful for dismissing error dialogs or messages.&#10;     */&#10;    fun clearError() {&#10;        _error.value = null&#10;    }&#10;&#10;    /**&#10;     * Checks if the current user is authenticated.&#10;     * @return true if user is authenticated, false otherwise&#10;     */&#10;    fun isAuthenticated(): Boolean = authRepository.isUserAuthenticated()&#10;&#10;    /**&#10;     * Validates email format using a simple regex pattern.&#10;     * @param email Email string to validate&#10;     * @return true if email format is valid, false otherwise&#10;     */&#10;    private fun isValidEmail(email: String): Boolean {&#10;        return email.isNotEmpty() &amp;&amp; &#10;               android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches()&#10;    }&#10;&#10;    /**&#10;     * Validates password meets minimum requirements.&#10;     * @param password Password string to validate&#10;     * @return true if password is valid, false otherwise&#10;     */&#10;    private fun isValidPassword(password: String): Boolean {&#10;        return password.length &gt;= 6&#10;    }&#10;&#10;    /**&#10;     * Converts exception to user-friendly error message.&#10;     * @param exception The exception to convert&#10;     * @return User-friendly error message&#10;     */&#10;    private fun getErrorMessage(exception: Throwable): String {&#10;        return when {&#10;            exception.message?.contains(&quot;badly formatted&quot;) == true -&gt; &#10;                &quot;Please enter a valid email address&quot;&#10;            exception.message?.contains(&quot;There is no user&quot;) == true -&gt; &#10;                &quot;No account found with this email address&quot;&#10;            exception.message?.contains(&quot;password is invalid&quot;) == true -&gt; &#10;                &quot;Incorrect password. Please try again&quot;&#10;            exception.message?.contains(&quot;email address is already&quot;) == true -&gt; &#10;                &quot;An account with this email already exists&quot;&#10;            exception.message?.contains(&quot;network error&quot;) == true -&gt; &#10;                &quot;Network error. Please check your connection&quot;&#10;            exception.message?.contains(&quot;too-many-requests&quot;) == true -&gt; &#10;                &quot;Too many attempts. Please try again later&quot;&#10;            else -&gt; exception.message ?: &quot;An unexpected error occurred&quot;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.transigo.app.auth&#13;&#10;&#13;&#10;import androidx.lifecycle.ViewModel&#13;&#10;import androidx.lifecycle.viewModelScope&#13;&#10;import com.transigo.app.data.model.User&#13;&#10;import com.transigo.app.data.repository.AuthRepository&#13;&#10;import kotlinx.coroutines.flow.MutableStateFlow&#13;&#10;import kotlinx.coroutines.flow.StateFlow&#13;&#10;import kotlinx.coroutines.flow.asStateFlow&#13;&#10;import kotlinx.coroutines.launch&#13;&#10;&#13;&#10;/**&#13;&#10; * ViewModel for managing authentication state and operations.&#13;&#10; * Exposes loading state, error messages, and current user information.&#13;&#10; */&#13;&#10;class AuthViewModel(&#13;&#10;    private val authRepository: AuthRepository = AuthRepository()&#13;&#10;) : ViewModel() {&#13;&#10;&#13;&#10;    // Private mutable state flows&#13;&#10;    private val _isLoading = MutableStateFlow(false)&#13;&#10;    private val _error = MutableStateFlow&lt;String?&gt;(null)&#13;&#10;    private val _user = MutableStateFlow&lt;User?&gt;(null)&#13;&#10;&#13;&#10;    // Public read-only state flows&#13;&#10;    val isLoading: StateFlow&lt;Boolean&gt; = _isLoading.asStateFlow()&#13;&#10;    val error: StateFlow&lt;String?&gt; = _error.asStateFlow()&#13;&#10;    val user: StateFlow&lt;User?&gt; = _user.asStateFlow()&#13;&#10;&#13;&#10;    init {&#13;&#10;        // Start listening to authentication state changes&#13;&#10;        observeAuthState()&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Observes the current user authentication state and updates the user StateFlow.&#13;&#10;     * This will automatically update the UI when authentication state changes.&#13;&#10;     */&#13;&#10;    private fun observeAuthState() {&#13;&#10;        viewModelScope.launch {&#13;&#10;            authRepository.currentUserFlow().collect { user -&gt;&#13;&#10;                _user.value = user&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Registers a new user with email, password, and full name.&#13;&#10;     * Updates loading state and handles errors appropriately.&#13;&#10;     * &#13;&#10;     * @param email User's email address&#13;&#10;     * @param password User's password&#13;&#10;     * @param fullName User's full name&#13;&#10;     * @param onSuccess Callback invoked when registration succeeds&#13;&#10;     */&#13;&#10;    fun register(&#13;&#10;        email: String,&#13;&#10;        password: String,&#13;&#10;        fullName: String,&#13;&#10;        onSuccess: () -&gt; Unit = {}&#13;&#10;    ) {&#13;&#10;        // Validate input&#13;&#10;        if (!isValidEmail(email)) {&#13;&#10;            _error.value = &quot;Please enter a valid email address&quot;&#13;&#10;            return&#13;&#10;        }&#13;&#10;        &#13;&#10;        if (!isValidPassword(password)) {&#13;&#10;            _error.value = &quot;Password must be at least 6 characters long&quot;&#13;&#10;            return&#13;&#10;        }&#13;&#10;&#13;&#10;        viewModelScope.launch {&#13;&#10;            _isLoading.value = true&#13;&#10;            _error.value = null&#13;&#10;            &#13;&#10;            authRepository.register(email.trim(), password, fullName.trim())&#13;&#10;                .onSuccess { user -&gt;&#13;&#10;                    _user.value = user&#13;&#10;                    _isLoading.value = false&#13;&#10;                    onSuccess()&#13;&#10;                }&#13;&#10;                .onFailure { exception -&gt;&#13;&#10;                    _error.value = getErrorMessage(exception)&#13;&#10;                    _isLoading.value = false&#13;&#10;                }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Authenticates user with email and password.&#13;&#10;     * Updates loading state and handles errors appropriately.&#13;&#10;     * &#13;&#10;     * @param email User's email address&#13;&#10;     * @param password User's password&#13;&#10;     * @param onSuccess Callback invoked when login succeeds&#13;&#10;     */&#13;&#10;    fun login(&#13;&#10;        email: String,&#13;&#10;        password: String,&#13;&#10;        onSuccess: () -&gt; Unit = {}&#13;&#10;    ) {&#13;&#10;        // Validate input&#13;&#10;        if (!isValidEmail(email)) {&#13;&#10;            _error.value = &quot;Please enter a valid email address&quot;&#13;&#10;            return&#13;&#10;        }&#13;&#10;        &#13;&#10;        if (password.isEmpty()) {&#13;&#10;            _error.value = &quot;Please enter your password&quot;&#13;&#10;            return&#13;&#10;        }&#13;&#10;&#13;&#10;        viewModelScope.launch {&#13;&#10;            _isLoading.value = true&#13;&#10;            _error.value = null&#13;&#10;            &#13;&#10;            authRepository.login(email.trim(), password)&#13;&#10;                .onSuccess { user -&gt;&#13;&#10;                    _user.value = user&#13;&#10;                    _isLoading.value = false&#13;&#10;                    onSuccess()&#13;&#10;                }&#13;&#10;                .onFailure { exception -&gt;&#13;&#10;                    _error.value = getErrorMessage(exception)&#13;&#10;                    _isLoading.value = false&#13;&#10;                }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Signs out the current user.&#13;&#10;     * Clears user state and handles any errors.&#13;&#10;     */&#13;&#10;    fun logout() {&#13;&#10;        viewModelScope.launch {&#13;&#10;            authRepository.logout()&#13;&#10;            _user.value = null&#13;&#10;            _error.value = null&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Sends a password reset email to the specified email address.&#13;&#10;     * &#13;&#10;     * @param email Email address to send reset link to&#13;&#10;     * @param onSuccess Callback invoked when reset email is sent successfully&#13;&#10;     */&#13;&#10;    fun resetPassword(&#13;&#10;        email: String,&#13;&#10;        onSuccess: () -&gt; Unit = {}&#13;&#10;    ) {&#13;&#10;        if (!isValidEmail(email)) {&#13;&#10;            _error.value = &quot;Please enter a valid email address&quot;&#13;&#10;            return&#13;&#10;        }&#13;&#10;&#13;&#10;        viewModelScope.launch {&#13;&#10;            _isLoading.value = true&#13;&#10;            _error.value = null&#13;&#10;            &#13;&#10;            authRepository.resetPassword(email.trim())&#13;&#10;                .onSuccess {&#13;&#10;                    _isLoading.value = false&#13;&#10;                    onSuccess()&#13;&#10;                }&#13;&#10;                .onFailure { exception -&gt;&#13;&#10;                    _error.value = getErrorMessage(exception)&#13;&#10;                    _isLoading.value = false&#13;&#10;                }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Clears any current error message.&#13;&#10;     * Useful for dismissing error dialogs or messages.&#13;&#10;     */&#13;&#10;    fun clearError() {&#13;&#10;        _error.value = null&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Checks if the current user is authenticated.&#13;&#10;     * @return true if user is authenticated, false otherwise&#13;&#10;     */&#13;&#10;    fun isAuthenticated(): Boolean {&#13;&#10;        return _user.value != null&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Validates email format using a simple regex pattern.&#13;&#10;     * @param email Email string to validate&#13;&#10;     * @return true if email format is valid, false otherwise&#13;&#10;     */&#13;&#10;    private fun isValidEmail(email: String): Boolean {&#13;&#10;        return email.isNotEmpty() &amp;&amp; &#13;&#10;               android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches()&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Validates password meets minimum requirements.&#13;&#10;     * @param password Password string to validate&#13;&#10;     * @return true if password is valid, false otherwise&#13;&#10;     */&#13;&#10;    private fun isValidPassword(password: String): Boolean {&#13;&#10;        return password.length &gt;= 6&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Converts various exception types to user-friendly error messages.&#13;&#10;     * @param exception The exception to convert&#13;&#10;     * @return User-friendly error message&#13;&#10;     */&#13;&#10;    private fun getErrorMessage(exception: Throwable): String {&#13;&#10;        return when {&#13;&#10;            exception.message?.contains(&quot;network&quot;) == true -&gt; &#13;&#10;                &quot;Network error. Please check your connection.&quot;&#13;&#10;            exception.message?.contains(&quot;email&quot;) == true -&gt; &#13;&#10;                &quot;Invalid email address.&quot;&#13;&#10;            exception.message?.contains(&quot;password&quot;) == true -&gt; &#13;&#10;                &quot;Invalid password.&quot;&#13;&#10;            else -&gt; exception.message ?: &quot;An unknown error occurred&quot;&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/transigo/app/auth/ForgotPasswordScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/transigo/app/auth/ForgotPasswordScreen.kt" />
              <option name="updatedContent" value="package com.transigo.app.auth&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.text.KeyboardActions&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Email&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalFocusManager&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import androidx.navigation.NavController&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ForgotPasswordScreen(&#10;    navController: NavController,&#10;    viewModel: AuthViewModel = viewModel()&#10;) {&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var isResetSent by remember { mutableStateOf(false) }&#10;    &#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;    val error by viewModel.error.collectAsState()&#10;    val focusManager = LocalFocusManager.current&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(24.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        // Top App Bar with back button&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 32.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            IconButton(&#10;                onClick = { navController.popBackStack() }&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.ArrowBack,&#10;                    contentDescription = &quot;Back&quot;&#10;                )&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.weight(1f))&#10;            &#10;            Text(&#10;                text = &quot;Reset Password&quot;,&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.weight(1f))&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(48.dp))&#10;&#10;        if (!isResetSent) {&#10;            Text(&#10;                text = &quot;Enter your email address and we'll send you a link to reset your password.&quot;,&#10;                textAlign = TextAlign.Center,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                modifier = Modifier.padding(bottom = 32.dp)&#10;            )&#10;&#10;            OutlinedTextField(&#10;                value = email,&#10;                onValueChange = { email = it },&#10;                label = { Text(&quot;Email Address&quot;) },&#10;                leadingIcon = {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Email,&#10;                        contentDescription = &quot;Email&quot;&#10;                    )&#10;                },&#10;                keyboardOptions = KeyboardOptions(&#10;                    keyboardType = KeyboardType.Email,&#10;                    imeAction = ImeAction.Done&#10;                ),&#10;                keyboardActions = KeyboardActions(&#10;                    onDone = { &#10;                        focusManager.clearFocus()&#10;                        if (email.isNotBlank()) {&#10;                            viewModel.resetPassword(email) {&#10;                                isResetSent = true&#10;                            }&#10;                        }&#10;                    }&#10;                ),&#10;                singleLine = true,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(bottom = 24.dp)&#10;            )&#10;&#10;            error?.let { errorMessage -&gt;&#10;                Text(&#10;                    text = errorMessage,&#10;                    color = MaterialTheme.colorScheme.error,&#10;                    modifier = Modifier.padding(bottom = 16.dp),&#10;                    textAlign = TextAlign.Center&#10;                )&#10;            }&#10;&#10;            Button(&#10;                onClick = { &#10;                    viewModel.resetPassword(email) {&#10;                        isResetSent = true&#10;                    }&#10;                },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(56.dp),&#10;                enabled = !isLoading &amp;&amp; email.isNotBlank()&#10;            ) {&#10;                if (isLoading) {&#10;                    CircularProgressIndicator(&#10;                        modifier = Modifier.size(20.dp),&#10;                        color = MaterialTheme.colorScheme.onPrimary&#10;                    )&#10;                } else {&#10;                    Text(&quot;Send Reset Link&quot;, fontSize = 16.sp)&#10;                }&#10;            }&#10;        } else {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.primaryContainer)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(24.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Reset Link Sent!&quot;,&#10;                        fontSize = 20.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                    )&#10;                    &#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    &#10;                    Text(&#10;                        text = &quot;Check your email for instructions to reset your password.&quot;,&#10;                        textAlign = TextAlign.Center,&#10;                        color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                    )&#10;                }&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.height(24.dp))&#10;            &#10;            TextButton(&#10;                onClick = { navController.popBackStack() }&#10;            ) {&#10;                Text(&quot;Back to Login&quot;)&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>